import math
import random

# def sphere(x, y):   # limits -inf <= x,y <= inf
#     return x ** 2 + y ** 2
import numpy as np


def sphere(xvals):
    result = 0
    for x in xvals:
        result += x**2
    return result
 
def sphere_dx(x, y):
    return 2*x

def sphere_dy(x, y):
    return 2*y
#########################################
def booth(x, y):   # limits -10 <= x,y <= 10
    return (x + 2*y - 7)**2 + (2*x + y - 5)**2

def booth_dx(x, y):
    return 10*x + 8*y - 34

def booth_dy(x, y):
    return 10*y + 8*x - 38
#########################################
def rastrigin(xvals):
    result = len(xvals)*10
    for x in xvals:
        result += x**2 - 10*math.cos(2*math.pi*x)
    return result

def rastrigin2(xvals): #by SM used for 2d plotting
    result = len(xvals)*10
    for x in xvals:
        result += x**2 - 10*np.cos(2*np.pi*x)
    return result

def rastrigin_dx(x, y, A):
    return 2*x + 2*math.pi*A*math.sin(2*math.pi*x)

def rastrigin_dy(x, y, A):
    return 2*y + 2*math.pi*A*math.sin(2*math.pi*y)
#########################################
def beale(x, y):    # limits -4.5 <= x,y <= 4.5
    return (1.5 -x +x*y)**2 + (2.25 -x +x*y**2)**2 + (2.625 -x + x*y**3)**2

def beale_dx(x, y):
    return (y - 1)*((8*y**5 + 8*y**4 + 16*y**3 - 8*y - 24)*x + 21*y**2 + 39*y + 51) / 4
    
def beale_dy(x, y):
    return x*(24*x*y**5 + 16*x*y**3 + (63 - 24*x)*y**2 + (36 - 8*x)*y - 8*x + 12) / 4
#########################################
def mcCormick(x, y):    # limits -1.5 <= x <= 4, -3 <= y <= 4
    return math.sin(x+y) + (x-y)**2 + -1.5*x + 2.5*y + 1

def mcCormick_dx(x, y):
    return math.cos(x+y) + 2*(x-y) - 1.5
    
def mcCormick_dy(x, y):
    return math.cos(x+y) - 2*(x-y) + 2.5
#########################################
def eggholder1(x, y):    # limits -512 <= x <= 512, -512 <= y <= 512
    return -(y + 47)*math.sin(math.sqrt(abs(x/2 + y + 47))) - x*math.sin(math.sqrt(abs(x - y - 47)))

def eggholder(x):    # limits -512 <= x <= 512, -512 <= y <= 512
    res=0
    for i in range(len(x)-1):
        res += -(x[i+1]+47)*math.sin(math.sqrt(abs(x[i]/2 + x[i+1] + 47))) - x[i]*math.sin(math.sqrt(abs(x[i] - x[i+1] - 47)))
#     return -(x[1] + 47)*math.sin(math.sqrt(abs(x[0]/2 + x[1] + 47))) - x[0]*math.sin(math.sqrt(abs(x[0] - x[1] - 47)))
    return res

def eggholder_dx(x, y):
    return -math.sin(math.sqrt(abs(x - y - 47))) - (x*(x - y - 47)* math.cos(math.sqrt(abs(x - y - 47)))) / (2*abs(x - y - 47)**(3/2)) + ((- y - 47)*math.cos(math.sqrt(abs(x/2 + y + 47)))*(x/2 + y + 47)) / (4*abs(x/2 + y + 47)**(3/2))

def eggholder_dy(x, y):
    return -math.sin(math.sqrt(abs(x/2 + y + 47))) + ((- y - 47)*(x/2 + y + 47)*math.cos(math.sqrt(abs(x/2 + y + 47)))) / (2*abs(y + x/2 + 47)**(3/2)) - (x*(y - x + 47)*math.cos(math.sqrt(abs(y - x + 47)))) / (2*abs(y - x + 47)**(3/2))
#########################################
# def ackley(x, y):
#     return -20*math.exp(-0.2*math.sqrt(0.5*(x**2 + y**2))) - math.exp(0.5*(math.cos(2*math.pi*x) + math.cos(2*math.pi*y))) + math.e + 20

def ackley(xvals):
    sum1 = 0
    sum2 = 0
    for x in xvals:
        sum1 += x**2
        sum2 += math.cos(2*math.pi*x)
    return -20*math.exp(-0.2*math.sqrt((1/len(xvals))*sum1)) - math.exp((1/len(xvals))*sum2) + 20 + math.exp(1)
#########################################
def rosenbrock(x, y):
    return 100*(y - x**2)**2 + (x - 1)**2

def rosenbrock_dx(x, y):
    return 400*x**3 + (2 - 400*y)*x - 2

def rosenbrock_dy(x, y):
    return 200*(y - x**2)
#########################################
def goldsteinPrince(x, y):
    return (1 + ((x + y + 1)**2)*(19 - 14*x + 3*x**2 - 14*y + 6*x*y + 3*y**2))*(30 + ((2*x - 3*y)**2)*(18 - 32*x + 12*x**2 + 48*y - 36*x*y + 27*y**2))

def goldsteinPrince_dx(x, y):
    return (2*(x + y + 1)*(3*x**2 + 6*x*y + - 14*x +3*y**2 - 14*y + 19) + ((x + y + 1)**2)*(6*x + 6*y - 14))*(((2*x - 3*y)**2)*(12*x**2 - 36*x*y - 32*x + 27*y**2 + 48*y + 18) + 30) + (((x + y + 1)**2)*(3*x**2 + 6*x*y + - 14*x + 3*y**2 - 14*y + 19) + 1)*(4*(2*x - 3*y)*(12*x**2  - 36*x*y - 32*x + 27*y**2 + 48*y + 18) + ((2*x - 3*y)**2)*(24*x - 36*y - 32))
#########################################

def schwefel(xvals):
    result = len(xvals)*418.9829
    for x in xvals:
        result += x*math.sin(math.sqrt(abs(x)))
    return result

#########################################
def easom1(x, y):        # limits -10 <= x <= 10, -10 <= y <= 10
    return -math.cos(x)*math.cos(y)*math.exp(-((x - math.pi)**2 + (y - math.pi)**2))

def easom(x):        # limits -10 <= x <= 10, -10 <= y <= 10
    return -math.cos(x[0])*math.cos(x[1])*math.exp(-((x[0] - math.pi)**2 + (x[1] - math.pi)**2))

def easom2(x):        # limits -10 <= x <= 10, -10 <= y <= 10
    return -np.cos(x[0])*np.cos(x[1])*np.exp(-((x[0] - np.pi)**2 + (x[1] - np.pi)**2))

#########################################
def shubert1(x, y):
    xval = 0
    yval = 0
    for i in range(1, 6):
        xval += i*math.cos((i + 1)*x + i)
        yval += i*math.cos((i + 1)*y + i)
    return xval*yval

def shubert(x):
    xval = 0
    yval = 0
    for i in range(1, 6):
        xval += i*math.cos((i + 1)*x[0] + i)
        yval += i*math.cos((i + 1)*x[1] + i)
    return xval*yval
#########################################
def alpine(x, y):
    return abs(x*math.sin(x) + 0.1*x) + abs(y*math.sin(y) + 0.1*y)
#########################################
def griewank(x):
    part1 = 0
    part2 = 1
    for i in range(len(x)):
        part1 += x[i]**2
        part2 *= math.cos(float(x[i]) / math.sqrt(i+1))
    return 1 + (float(part1)/4000.0) - float(part2)
#########################################
def holdertable1(x, y):
    return -abs(math.sin(x)*math.cos(y)*math.exp(abs(1 - math.sqrt(x**2 + y**2) / math.pi)))

def holdertable(x):
    return -abs(math.sin(x[0])*math.cos(x[1])*math.exp(abs(1 - math.sqrt(x[0]**2 + x[1]**2) / math.pi)))
#########################################
def langermann1(x, y):
    m = 5
    c = [1, 2, 5, 2, 3]
    A = {
        0 : {
            0 : 3,
            1 : 5            
            },
        1 : {
            0 : 5,
            1 : 2            
            },
        2 : {
            0 : 2,
            1 : 1            
            },
        3 : {
            0 : 1,
            1 : 4            
            },
        4 : {
            0 : 7,
            1 : 9            
            }
        }
    res = 0
    for i in range(0, m):
        res += c[i]*math.exp((-1/math.pi)*((x - A[i][0])**2 + (y - A[i][1])**2))*math.cos(math.pi*((x - A[i][0])**2 + (y - A[i][1])**2))
    return res
        
def langermann(x):
    m = 5
    c = [1, 2, 5, 2, 3]
    # 3D
    A = {0 : {0 : 3, 1 : 5}, 1 : {0 : 5, 1 : 2},2 : {0 : 2, 1 : 1}, 3 : {0 : 1, 1 : 4}, 4 : {0 : 7, 1 : 9}}
    #10D
#     A = [[7, 6, 5, 9, 4, 8, 9, 6, 5], [10, 6, 4, 7, 2, 8, 5, 1, 7], [7, 9, 9, 3, 9, 2, 7, 7, 9], [3, 10, 7, 10, 2, 7, 5, 9, 5], [10, 4, 7, 6, 2, 8, 3, 4, 1]]
    #20D
#     A = [[7, 1, 7, 4, 10, 5, 3, 3, 6, 5, 7, 2, 9, 5, 6, 7, 3, 3, 8], [9, 7, 2, 9, 10, 6, 9, 5, 8, 4, 4, 4, 6, 10, 1, 7, 10, 7, 1], [3, 9, 10, 8, 10, 3, 2, 5, 8, 9, 3, 4, 10, 4, 4, 3, 2, 3, 4], [10, 8, 1, 6, 7, 4, 7, 7, 3, 1, 1, 9, 6, 6, 10, 9, 9, 5, 6], [6, 5, 1, 10, 7, 4, 4, 2, 1, 4, 10, 5, 3, 5, 9, 9, 6, 1, 1]]
    #30D
    #A = [[1, 2, 4, 8, 3, 10, 9, 1, 5, 6, 10, 2, 7, 5, 2, 6, 9, 5, 4, 3, 3, 10, 7, 3, 6, 8, 7, 5, 6], [9, 3, 8, 7, 6, 4, 3, 8, 9, 1, 7, 5, 1, 5, 9, 3, 7, 4, 10, 6, 7, 7, 8, 1, 4, 10, 1, 4, 7], [1, 6, 1, 2, 7, 3, 7, 2, 1, 3, 9, 5, 8, 7, 5, 5, 8, 4, 6, 2, 5, 3, 6, 3, 8, 5, 9, 10, 8], [2, 5, 1, 6, 3, 4, 9, 4, 4, 9, 2, 3, 5, 7, 10, 3, 4, 6, 9, 6, 5, 6, 5, 4, 10, 4, 9, 7, 6], [6, 3, 9, 4, 5, 9, 5, 4, 4, 5, 1, 9, 10, 7, 10, 4, 2, 3, 1, 2, 5, 8, 7, 2, 4, 3, 2, 10, 8]]
    #40D
#     A = [[5, 7, 1, 3, 4, 3, 5, 9, 3, 7, 2, 9, 5, 7, 8, 6, 5, 3, 6, 3, 10, 10, 7, 9, 6, 6, 7, 5, 5, 1, 3, 7, 2, 1, 4, 2, 3, 3, 3], [9, 10, 1, 6, 2, 5, 2, 2, 4, 5, 9, 9, 3, 9, 10, 9, 4, 3, 8, 4, 6, 8, 6, 5, 6, 10, 7, 9, 8, 2, 3, 1, 10, 6, 6, 7, 4, 1, 8], [10, 1, 7, 7, 3, 1, 9, 5, 5, 7, 8, 10, 3, 1, 10, 10, 2, 10, 7, 3, 5, 2, 3, 8, 2, 3, 7, 9, 5, 8, 9, 10, 10, 5, 8, 4, 8, 5, 1], [9, 10, 8, 9, 8, 4, 7, 7, 5, 9, 7, 3, 10, 6, 7, 6, 6, 6, 10, 9, 7, 2, 8, 9, 4, 1, 2, 5, 1, 2, 8, 3, 5, 4, 3, 4, 5, 3, 6], [5, 2, 9, 2, 7, 4, 3, 2, 9, 1, 1, 9, 6, 5, 2, 8, 7, 4, 10, 4, 1, 6, 2, 2, 5, 3, 3, 1, 5, 9, 10, 10, 8, 3, 10, 2, 6, 4, 5]]
    #50D
#     A = [[1, 10, 3, 7, 9, 7, 7, 5, 4, 10, 5, 4, 10, 5, 2, 6, 5, 4, 7, 4, 7, 6, 7, 1, 10, 6, 6, 10, 9, 9, 4, 1, 7, 8, 1, 1, 5, 8, 7, 3, 2, 5, 4, 4, 2, 1, 5, 10, 1], [9, 1, 2, 6, 3, 3, 9, 3, 6, 6, 7, 1, 8, 5, 1, 3, 8, 9, 3, 6, 6, 10, 2, 3, 1, 8, 8, 10, 6, 7, 10, 8, 6, 4, 10, 9, 10, 2, 6, 8, 4, 5, 1, 3, 3, 5, 10, 9, 9], [3, 4, 5, 2, 9, 5, 8, 6, 10, 8, 6, 4, 4, 6, 8, 3, 8, 10, 3, 9, 2, 6, 2, 8, 8, 8, 1, 4, 1, 2, 6, 1, 8, 10, 2, 5, 3, 7, 1, 6, 1, 7, 1, 4, 10, 3, 2, 9, 2], [4, 4, 6, 7, 5, 10, 1, 5, 2, 4, 3, 10, 2, 4, 3, 7, 3, 3, 10, 4, 8, 6, 10, 5, 1, 5, 5, 6, 8, 10, 7, 9, 7, 2, 10, 8, 4, 8, 6, 1, 1, 8, 8, 2, 10, 8, 3, 8, 1], [9, 3, 8, 4, 6, 8, 8, 8, 6, 4, 1, 9, 1, 7, 6, 8, 7, 2, 7, 9, 1, 10, 5, 7, 1, 2, 1, 9, 3, 2, 9, 8, 6, 8, 8, 3, 10, 5, 7, 9, 8, 1, 10, 6, 6, 2, 4, 7, 2]]
    
    res = 0
    for i in range(0, m):
        sum1=0
        sum2=0
        for j in range(len(x)):
            sum1+=(x[j] - A[i][j])**2
            sum2+=(x[j] - A[i][j])**2
        res += c[i]*math.exp((-1/math.pi)*sum1)*math.cos(math.pi*sum2)
    return res


def langermann2(x):
    m = 5
    c = [1, 2, 5, 2, 3]
    # 3D
    A = {0 : {0 : 3, 1 : 5}, 1 : {0 : 5, 1 : 2},2 : {0 : 2, 1 : 1}, 3 : {0 : 1, 1 : 4}, 4 : {0 : 7, 1 : 9}}
    # 10D
    #     A = [[7, 6, 5, 9, 4, 8, 9, 6, 5], [10, 6, 4, 7, 2, 8, 5, 1, 7], [7, 9, 9, 3, 9, 2, 7, 7, 9], [3, 10, 7, 10, 2, 7, 5, 9, 5], [10, 4, 7, 6, 2, 8, 3, 4, 1]]
    # 20D
    #     A = [[7, 1, 7, 4, 10, 5, 3, 3, 6, 5, 7, 2, 9, 5, 6, 7, 3, 3, 8], [9, 7, 2, 9, 10, 6, 9, 5, 8, 4, 4, 4, 6, 10, 1, 7, 10, 7, 1], [3, 9, 10, 8, 10, 3, 2, 5, 8, 9, 3, 4, 10, 4, 4, 3, 2, 3, 4], [10, 8, 1, 6, 7, 4, 7, 7, 3, 1, 1, 9, 6, 6, 10, 9, 9, 5, 6], [6, 5, 1, 10, 7, 4, 4, 2, 1, 4, 10, 5, 3, 5, 9, 9, 6, 1, 1]]
    # 30D
    # A = [[1, 2, 4, 8, 3, 10, 9, 1, 5, 6, 10, 2, 7, 5, 2, 6, 9, 5, 4, 3, 3, 10, 7, 3, 6, 8, 7, 5, 6],
    #      [9, 3, 8, 7, 6, 4, 3, 8, 9, 1, 7, 5, 1, 5, 9, 3, 7, 4, 10, 6, 7, 7, 8, 1, 4, 10, 1, 4, 7],
    #      [1, 6, 1, 2, 7, 3, 7, 2, 1, 3, 9, 5, 8, 7, 5, 5, 8, 4, 6, 2, 5, 3, 6, 3, 8, 5, 9, 10, 8],
    #      [2, 5, 1, 6, 3, 4, 9, 4, 4, 9, 2, 3, 5, 7, 10, 3, 4, 6, 9, 6, 5, 6, 5, 4, 10, 4, 9, 7, 6],
    #      [6, 3, 9, 4, 5, 9, 5, 4, 4, 5, 1, 9, 10, 7, 10, 4, 2, 3, 1, 2, 5, 8, 7, 2, 4, 3, 2, 10, 8]]
    # 40D
    #     A = [[5, 7, 1, 3, 4, 3, 5, 9, 3, 7, 2, 9, 5, 7, 8, 6, 5, 3, 6, 3, 10, 10, 7, 9, 6, 6, 7, 5, 5, 1, 3, 7, 2, 1, 4, 2, 3, 3, 3], [9, 10, 1, 6, 2, 5, 2, 2, 4, 5, 9, 9, 3, 9, 10, 9, 4, 3, 8, 4, 6, 8, 6, 5, 6, 10, 7, 9, 8, 2, 3, 1, 10, 6, 6, 7, 4, 1, 8], [10, 1, 7, 7, 3, 1, 9, 5, 5, 7, 8, 10, 3, 1, 10, 10, 2, 10, 7, 3, 5, 2, 3, 8, 2, 3, 7, 9, 5, 8, 9, 10, 10, 5, 8, 4, 8, 5, 1], [9, 10, 8, 9, 8, 4, 7, 7, 5, 9, 7, 3, 10, 6, 7, 6, 6, 6, 10, 9, 7, 2, 8, 9, 4, 1, 2, 5, 1, 2, 8, 3, 5, 4, 3, 4, 5, 3, 6], [5, 2, 9, 2, 7, 4, 3, 2, 9, 1, 1, 9, 6, 5, 2, 8, 7, 4, 10, 4, 1, 6, 2, 2, 5, 3, 3, 1, 5, 9, 10, 10, 8, 3, 10, 2, 6, 4, 5]]
    # 50D
    #     A = [[1, 10, 3, 7, 9, 7, 7, 5, 4, 10, 5, 4, 10, 5, 2, 6, 5, 4, 7, 4, 7, 6, 7, 1, 10, 6, 6, 10, 9, 9, 4, 1, 7, 8, 1, 1, 5, 8, 7, 3, 2, 5, 4, 4, 2, 1, 5, 10, 1], [9, 1, 2, 6, 3, 3, 9, 3, 6, 6, 7, 1, 8, 5, 1, 3, 8, 9, 3, 6, 6, 10, 2, 3, 1, 8, 8, 10, 6, 7, 10, 8, 6, 4, 10, 9, 10, 2, 6, 8, 4, 5, 1, 3, 3, 5, 10, 9, 9], [3, 4, 5, 2, 9, 5, 8, 6, 10, 8, 6, 4, 4, 6, 8, 3, 8, 10, 3, 9, 2, 6, 2, 8, 8, 8, 1, 4, 1, 2, 6, 1, 8, 10, 2, 5, 3, 7, 1, 6, 1, 7, 1, 4, 10, 3, 2, 9, 2], [4, 4, 6, 7, 5, 10, 1, 5, 2, 4, 3, 10, 2, 4, 3, 7, 3, 3, 10, 4, 8, 6, 10, 5, 1, 5, 5, 6, 8, 10, 7, 9, 7, 2, 10, 8, 4, 8, 6, 1, 1, 8, 8, 2, 10, 8, 3, 8, 1], [9, 3, 8, 4, 6, 8, 8, 8, 6, 4, 1, 9, 1, 7, 6, 8, 7, 2, 7, 9, 1, 10, 5, 7, 1, 2, 1, 9, 3, 2, 9, 8, 6, 8, 8, 3, 10, 5, 7, 9, 8, 1, 10, 6, 6, 2, 4, 7, 2]]

    res = 0
    for i in range(0, m):
        sum1 = 0
        sum2 = 0
        for j in range(len(x)):
            sum1 += (x[j] - A[i][j]) ** 2
            sum2 += (x[j] - A[i][j]) ** 2
        res += c[i] * np.exp((-1 / np.pi) * sum1) * np.cos(np.pi * sum2)
    return res
#########################################
def dropwave1(x, y):
    return -(1 + math.cos(12*math.sqrt(x**2 + y**2))) / (0.5*(x**2 + y**2) + 2)

def dropwave(x):
    return -(1 + math.cos(12*math.sqrt(x[0]**2 + x[1]**2))) / (0.5*(x[0]**2 + x[1]**2) + 2)

#########################################
def michalewicz(x):
    m=10
    res=0
    for i in range(1, len(x)+1):
        res-=math.sin(x[i])*(math.sin(i*x[i]**2/math.pi))**(2*m)
    return res
#########################################
def sineEnvelope(x):
    result=0
    for i in range(len(x)-1):
        num = math.sin(math.sqrt(x[i]**2 + x[i+1]**2) - 0.5)**2
        den = (0.001*(x[i+1]**2 + x[i]**2) + 1)**2
        result += num/den + 0.5
    return result
#########################################
def styblinskiTang(x):
    return -39.16599*len(x)


'''remove below function its just for testing'''
def function1_max(x):
    res=0
    for i in range(len(x)):
        res+= -(x[i] - 2)**2 + 5
    return res
